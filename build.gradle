buildscript {

	ext {
		kotlinVersion = '1.7.10'
		springBootVersion = '2.7.3'
		springKafkaVersion = '2.9.0'
		cxfVersion = '3.4.2'
		jacksonVersion = '2.13.3'
		tokenSupportVersion = '2.1.3'
		logstashLogbackVersion = '7.2'
		pensjonInformasjonVersion = '9.4.10'
		epMetricsVersion = '0.5.9'
		epLoggingVersion = '1.0.36'
		epPersonoppslagVersion = '11.2.14'
		epEuxVersion = '1.3.7'
	}
	repositories {
		mavenCentral()
	}
}

plugins {
	id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
	id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
	id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
	id 'org.springframework.boot' version "${springBootVersion}"
	id "io.spring.dependency-management" version "1.0.13.RELEASE"
	id "org.openrepose.gradle.plugins.jaxb" version "2.5.0"
	id 'com.github.ben-manes.versions' version '0.42.0'
	id "se.patrikerdes.use-latest-versions" version "0.2.18"
	id "org.owasp.dependencycheck" version "7.1.2"
	id 'com.adarshr.test-logger' version '3.2.0'
	id "org.sonarqube" version "3.4.0.2513"
	id 'jacoco'
}

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17): "Java 17 or newer is required"

group = 'no.nav.eessi.pensjon'

dependencies {

	// Spring-boot BOM-fil spesifiserer versjoner for Spring Boot-avhengigheter
	implementation(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))
	implementation("org.springframework.boot:spring-boot-starter-aop")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-actuator")

	// Spring Framework BOM-fil overstyrer så vi får siste patch-versjon av Spring Framework
	implementation(platform("org.springframework:spring-framework-bom:5.3.22"))

	implementation("org.apache.httpcomponents:httpclient:4.5.13")

	implementation('org.springframework.retry:spring-retry:1.3.3')

	implementation "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

	implementation(platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"))
	implementation 'org.jetbrains.kotlin:kotlin-reflect'

	implementation "org.springframework.kafka:spring-kafka:$springKafkaVersion"

	// Micrometer
	implementation("io.micrometer:micrometer-registry-prometheus")

	// Eessi pensjon biblioteker
	implementation("no.nav.eessi.pensjon:ep-metrics:${epMetricsVersion}")
	implementation("no.nav.eessi.pensjon:ep-logging:${epLoggingVersion}")
	implementation("no.nav.eessi.pensjon:ep-personoppslag:${epPersonoppslagVersion}")
	implementation("no.nav.eessi.pensjon:ep-eux:${epEuxVersion}")

	// Logging
	implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
	configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
	implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

	//Auth
	implementation("no.nav.security:token-client-spring:${tokenSupportVersion}")
	implementation("no.nav.security:token-validation-spring:${tokenSupportVersion}")
	implementation("no.nav.security:token-validation-jaxrs:${tokenSupportVersion}")
	implementation("no.nav.security:token-validation-test-support:2.0.5")


	//GCP
	implementation(platform("com.google.cloud:libraries-bom:26.1.0"))
	implementation("com.google.cloud:google-cloud-storage")

	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude module: 'junit'
		exclude module: "mockito-core"
		exclude module: "junit-vintage-engine"
	}
	testImplementation "org.springframework.kafka:spring-kafka-test:$springKafkaVersion"

	testImplementation(platform("org.junit:junit-bom:5.9.0"))
	testImplementation("org.junit.jupiter:junit-jupiter")

	//mock - test
	testImplementation("org.mock-server:mockserver-netty:5.14.0") {
		exclude module: 'junit'
	}
	testImplementation('io.mockk:mockk:1.12.5')
	testImplementation("com.ninja-squad:springmockk:3.1.1")

	// Architecture tests
	testImplementation 'com.tngtech.archunit:archunit:0.23.1'

	//testcontainers
	testImplementation("org.testcontainers:junit-jupiter:1.17.3")
	testImplementation "org.testcontainers:testcontainers:1.17.3"
}

test {
	useJUnitPlatform()
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "17"
		allWarningsAsErrors = true
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '17'
		allWarningsAsErrors = true
	}
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]


repositories {
	mavenCentral()

	String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
	if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")

	maven {
		url = uri("https://maven.pkg.github.com/navikt/maven-release")
		credentials {
			username = "token"
			password = token
		}
	}
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}


jacocoTestReport {
	reports {
		xml.enabled true
	}
}

sonarqube {
	properties {
		property 'sonar.host.url', 'http://localhost:9000'
	}
}
tasks.sonarqube.dependsOn tasks["jacocoTestReport"]


dependencyUpdates {
	rejectVersionIf {
		['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
				.any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
	}
	revision = 'release'
}


